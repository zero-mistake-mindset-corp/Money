// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Money.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Money.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250120004845_Transfers")]
    partial class Transfers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Money.Data.Entities.ConfirmationCodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationCodes");
                });

            modelBuilder.Entity("Money.Data.Entities.ExpenseTransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ExpenseTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoneyAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("MoneyAccountId");

                    b.ToTable("ExpenseTransactions");
                });

            modelBuilder.Entity("Money.Data.Entities.ExpenseTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("Money.Data.Entities.IncomeTransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("IncomeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoneyAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IncomeTypeId");

                    b.HasIndex("MoneyAccountId");

                    b.ToTable("IncomeTransactions");
                });

            modelBuilder.Entity("Money.Data.Entities.IncomeTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IncomeTypes");
                });

            modelBuilder.Entity("Money.Data.Entities.MoneyAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MoneyAccounts");
                });

            modelBuilder.Entity("Money.Data.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Money.Data.Entities.TransferEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReceivingMoneyAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SendingMoneyAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TrackingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingMoneyAccountId");

                    b.HasIndex("SendingMoneyAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Money.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTwoFactorAuthEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Money.Data.Entities.ConfirmationCodeEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.UserEntity", "User")
                        .WithMany("ConfirmationCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Money.Data.Entities.ExpenseTransactionEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.ExpenseTypeEntity", "ExpenseType")
                        .WithMany("ExpenseTransactions")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Money.Data.Entities.MoneyAccountEntity", "MoneyAccount")
                        .WithMany("ExpenseTransactions")
                        .HasForeignKey("MoneyAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("MoneyAccount");
                });

            modelBuilder.Entity("Money.Data.Entities.ExpenseTypeEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.UserEntity", "User")
                        .WithMany("ExpenseTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Money.Data.Entities.IncomeTransactionEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.IncomeTypeEntity", "IncomeType")
                        .WithMany("IncomeTransactions")
                        .HasForeignKey("IncomeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Money.Data.Entities.MoneyAccountEntity", "MoneyAccount")
                        .WithMany("IncomeTransactions")
                        .HasForeignKey("MoneyAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeType");

                    b.Navigation("MoneyAccount");
                });

            modelBuilder.Entity("Money.Data.Entities.IncomeTypeEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.UserEntity", "User")
                        .WithMany("IncomeTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Money.Data.Entities.MoneyAccountEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.UserEntity", "User")
                        .WithMany("MoneyAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Money.Data.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Money.Data.Entities.TransferEntity", b =>
                {
                    b.HasOne("Money.Data.Entities.MoneyAccountEntity", "ReceivingMoneyAccount")
                        .WithMany("ReceivedTransfers")
                        .HasForeignKey("ReceivingMoneyAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Money.Data.Entities.MoneyAccountEntity", "SendingMoneyAccount")
                        .WithMany("SentTransfers")
                        .HasForeignKey("SendingMoneyAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Money.Data.Entities.UserEntity", "User")
                        .WithMany("Transfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingMoneyAccount");

                    b.Navigation("SendingMoneyAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Money.Data.Entities.ExpenseTypeEntity", b =>
                {
                    b.Navigation("ExpenseTransactions");
                });

            modelBuilder.Entity("Money.Data.Entities.IncomeTypeEntity", b =>
                {
                    b.Navigation("IncomeTransactions");
                });

            modelBuilder.Entity("Money.Data.Entities.MoneyAccountEntity", b =>
                {
                    b.Navigation("ExpenseTransactions");

                    b.Navigation("IncomeTransactions");

                    b.Navigation("ReceivedTransfers");

                    b.Navigation("SentTransfers");
                });

            modelBuilder.Entity("Money.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("ConfirmationCodes");

                    b.Navigation("ExpenseTypes");

                    b.Navigation("IncomeTypes");

                    b.Navigation("MoneyAccounts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Transfers");
                });
#pragma warning restore 612, 618
        }
    }
}
